{"version":3,"sources":["enemy.js"],"names":["cc","Class","extends","Component","properties","player","Node","speed","default","type","Float","button","onLoad","find","start","Genzong","targetPosition","targetPoint","point","v2","node","x","y","delta","sub","distance","mag","x2","y2","newPosition","x1","y1","deltaRotation","Math","atan2","PI","rotation","director","pause","active","setPosition","a","b","sqrt","pow","update","dt","position"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,gBAAQL,GAAGM,IAhBH;;AAmBRC,eAAO;AACHC,qBAAS,CADN;AAEHC,kBAAMT,GAAGU;AAFN,SAnBC;AAuBRC,gBAAQX,GAAGM;;AAvBH,KAHP;;AA8BL;;AAEAM,UAhCK,oBAgCI;AACL,aAAKP,MAAL,GAAcL,GAAGa,IAAH,CAAQ,eAAR,CAAd;AACD;AACC;AACA,aAAKF,MAAL,GAAcX,GAAGa,IAAH,CAAQ,eAAR,CAAd;AACH,KArCI;AAuCLC,SAvCK,mBAuCI,CAER,CAzCI;AA0CLC,WA1CK,mBA0CGC,cA1CH,EA0CmB;;AAEpB,YAAIC,cAAcD,cAAlB;AACA,YAAIE,QAAQlB,GAAGmB,EAAH,CAAM,KAAKC,IAAL,CAAUC,CAAhB,EAAmB,KAAKD,IAAL,CAAUE,CAA7B,CAAZ;AACA,YAAIC,QAAQN,YAAYO,GAAZ,CAAgBN,KAAhB,CAAZ;AACA,YAAIO,WAAWP,MAAMM,GAAN,CAAUP,WAAV,EAAuBS,GAAvB,EAAf;;AAEA,YAAIC,KAAKT,MAAMG,CAAN,GAAU,KAAKd,KAAL,GAAagB,MAAMF,CAAnB,GAAuBI,QAA1C;AACA,YAAIG,KAAKV,MAAMI,CAAN,GAAU,KAAKf,KAAL,GAAagB,MAAMD,CAAnB,GAAuBG,QAA1C;AACA,YAAII,cAAc7B,GAAGmB,EAAH,CAAMQ,EAAN,EAAUC,EAAV,CAAlB;AACA,YAAIE,KAAKZ,MAAMG,CAAf;AACA,YAAIU,KAAKb,MAAMI,CAAf;AACA,YAAIU,gBAAgB,KAAKC,KAAKC,KAAL,CAAWN,KAAKG,EAAhB,EAAoBJ,KAAKG,EAAzB,IAA+B,GAA/B,GAAqCG,KAAKE,EAAnE;AACA,aAAKf,IAAL,CAAUgB,QAAV,GAAqBJ,aAArB;AACA,YAAIP,YAAY,EAAhB,EAAoB;AAChBzB,eAAGqC,QAAH,CAAYC,KAAZ;AACA,iBAAK3B,MAAL,CAAY4B,MAAZ,GAAqB,IAArB;AACA;AACA,mBAAO,IAAP;AACH;AACD,aAAKnB,IAAL,CAAUoB,WAAV,CAAsBX,WAAtB;AAEH,KAhEI;AAiELJ,YAjEK,oBAiEIgB,CAjEJ,EAiEMC,CAjEN,EAiEQ;AACT,eAAOT,KAAKU,IAAL,CAAUV,KAAKW,GAAL,CAAUH,EAAEpB,CAAF,GAAIqB,EAAErB,CAAhB,EAAmB,CAAnB,IAAwBY,KAAKW,GAAL,CAAUH,EAAEnB,CAAF,GAAIoB,EAAEpB,CAAhB,EAAmB,CAAnB,CAAlC,CAAP;AAEH,KApEI;AAsELuB,UAtEK,kBAsEEC,EAtEF,EAsEM;AACR;AACA,YAAG,KAAKrB,QAAL,CAAc,KAAKpB,MAAnB,EAA0B,KAAKe,IAA/B,IAAqC,GAAxC,EAA4C;AAC3C,iBAAKL,OAAL,CAAa,KAAKV,MAAL,CAAY0C,QAAzB;AACA;AAEH;AA5EI,CAAT","file":"enemy.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        player: cc.Node,\r\n\r\n        \r\n        speed: {\r\n            default: 3,\r\n            type: cc.Float,\r\n        },\r\n        button: cc.Node,\r\n\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        this.player = cc.find(\"Canvas/player\");\r\n       // cc.director.getCollisionManager().enabled = true;\r\n        //boom_anim = this.node.getComponent(cc.Animation);\r\n        this.button = cc.find(\"Canvas/button\");\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n    Genzong(targetPosition) {\r\n\r\n        var targetPoint = targetPosition;\r\n        var point = cc.v2(this.node.x, this.node.y);\r\n        var delta = targetPoint.sub(point);\r\n        var distance = point.sub(targetPoint).mag();\r\n        \r\n        var x2 = point.x + this.speed * delta.x / distance;\r\n        var y2 = point.y + this.speed * delta.y / distance;\r\n        var newPosition = cc.v2(x2, y2);\r\n        var x1 = point.x;\r\n        var y1 = point.y;\r\n        var deltaRotation = 90 - Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\r\n        this.node.rotation = deltaRotation;\r\n        if (distance <= 10) {\r\n            cc.director.pause();\r\n            this.button.active = true;\r\n            //console.log(\"��Ϸ����\");\r\n            return true;\r\n        }\r\n        this.node.setPosition(newPosition);\r\n\r\n    },\r\n    distance(a,b){\r\n        return Math.sqrt(Math.pow((a.x-b.x),2) + Math.pow((a.y-b.y),2));\r\n\r\n    },\r\n\r\n    update(dt) {\r\n       //console.log(this.distance(this.player,this.node));\r\n       if(this.distance(this.player,this.node)<200){\r\n        this.Genzong(this.player.position);\r\n       }\r\n        \r\n    },\r\n\r\n   \r\n\r\n});\r\n"]}